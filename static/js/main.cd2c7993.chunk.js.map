{"version":3,"sources":["Blop.js","App.js","index.js"],"names":["Button","styled","button","Bar","div","faces","QRCube","props","texture_1","useLoader","TextureLoader","texture_2","texture_3","texture_4","texture_5","texture_6","group","scale","mesh","rotationOrder","rotationY","rotationX","rotationZ","attach","args","meshStandardMaterial","map","attachArray","Blop","useState","xenon","setXenon","yoga","setYoga","zed","setZed","rX","useSpring","config","mass","tension","friction","precision","rY","rZ","to","Math","PI","perspective","camera","position","fov","intensity","fallback","color","onClick","Number","App","screenW","window","width","className","style","height","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.cd2c7993.chunk.js","sourcesContent":["import React, { useState, Suspense } from \"react\";\nimport { Canvas, useLoader } from \"@react-three/fiber\";\nimport { useSpring } from \"@react-spring/core\";\nimport { a } from \"@react-spring/three\";\nimport \"./styles.css\";\nimport styled from \"styled-components\";\n\nimport { TextureLoader } from \"three/src/loaders/TextureLoader.js\";\n\nconst Button = styled.button`\n  height: 40px;\n  margin: 12px 0 12px 12px;\n  padding: 0 12px;\n  border: 0;\n  border-radius: 3px;\n`;\n\nconst Bar = styled.div`\n  height: 20vh\n  width: 100%;\n  background: #528a7b;\n`;\n\nconst faces = [\n  \"crown.png\",\n  \"roar.png\",\n  \"plageu doctorss.png\",\n  \"dolphon.png\",\n  \"sockittoome.png\",\n  \"lineslineslines.png\",\n  \"JGit.svg\",\n  \"JLinkedIN.svg\",\n  \"Meme1.svg\",\n  \"Meme2.svg\",\n  \"Meme3.svg\",\n  \"RRoll.svg\"\n];\n\nfunction QRCube(props) {\n  //So Spring: state name doesnt matter, so we can have different states for differnt controls.\n\n  // const i = 0 + `${props.vertSpin}`;\n  // const j = 0 + `${props.hertSpin}`;\n  // const q = 0 + `${props.increment}`;\n  const texture_1 = useLoader(TextureLoader, `cube/${faces[0]}`);\n  const texture_2 = useLoader(TextureLoader, `cube/${faces[1]}`);\n  const texture_3 = useLoader(TextureLoader, `cube/${faces[2]}`);\n  const texture_4 = useLoader(TextureLoader, `cube/${faces[3]}`);\n  const texture_5 = useLoader(TextureLoader, `cube/${faces[4]}`);\n  const texture_6 = useLoader(TextureLoader, `cube/${faces[5]}`);\n  // const mesh = useRef();\n\n  // const { scale } = useSpring({\n  //   scale: active ? 75 : 50,\n  //   config: config.wobbly\n  // });\n\n  // // interpolate values from commong spring\n  // const scale = spring.to([0, 1], [1, 1]);\n\n  // //This rotation will change to the next face.  Will probably need to change scale or something to a state.\n  // // const rotationY = spring.to([0, 1], [0, Math.PI * 0.5]);\n  // const rotationY = spring.to([0, 1], [0, Math.PI * 0.5]);\n\n  // // const rotationX = spring.to([0, 1], [0, Math.PI * 0.5]);\n\n  // const color = spring.to([0, 1], [\"#6246ea\", \"#e45858\"]);\n  // // useFrame(() => {\n  // //   mesh.current.rotation.x += .01;\n  // //   // mesh.current.rotation.y = j;\n  // // });\n  return (\n    <>\n      <a.group position-y={props.scale}>\n        <a.mesh\n          rotationOrder=\"YXZ\"\n          rotation-y={props.rotationY}\n          rotation-x={props.rotationX}\n          rotation-z={props.rotationZ}\n          scale-x={props.scale}\n          scale-z={props.scale}\n          //Not sure why Number() works?\n          // onClick={() => setXenon(Number(xenon + 1))}\n        >\n          <boxBufferGeometry attach=\"geometry\" args={[2, 2, 2]} />\n          {/* <a.meshStandardMaterial\n          roughness={0.5}\n          attach=\"material\"\n          color={color}\n        /> */}\n          <a.meshStandardMaterial map={texture_1} attachArray=\"material\" />\n          <a.meshStandardMaterial map={texture_2} attachArray=\"material\" />\n          <a.meshStandardMaterial map={texture_3} attachArray=\"material\" />\n          <a.meshStandardMaterial map={texture_4} attachArray=\"material\" />\n          <a.meshStandardMaterial map={texture_5} attachArray=\"material\" />\n          <a.meshStandardMaterial map={texture_6} attachArray=\"material\" />\n        </a.mesh>\n      </a.group>\n    </>\n  );\n}\n\nexport default function Blop(props) {\n  const [xenon, setXenon] = useState(0);\n  const [yoga, setYoga] = useState(0);\n  const [zed, setZed] = useState(0);\n\n  const { rX } = useSpring({\n    rX: xenon,\n    config: { mass: 5, tension: 400, friction: 50, precision: 0.0001 }\n  });\n\n  const { rY } = useSpring({\n    rY: yoga,\n    config: { mass: 5, tension: 400, friction: 50, precision: 0.0001 }\n  });\n\n  const { rZ } = useSpring({\n    rZ: zed,\n    config: { mass: 5, tension: 400, friction: 50, precision: 0.0001 }\n  });\n\n  // interpolate values from commong spring\n  // const scale = rX.to([0, 1], [1,1]);\n\n  //function to rotate the axis to update the postion of the axis\n  //This rotation will change to the next face.  Will probably need to change scale or something to a state.\n  // const rotationY = spring.to([0, 1], [0, Math.PI * 0.5]);\n  const rotationY = rX.to([0, 1], [0, Math.PI * 0.5]);\n  const rotationX = rY.to([0, 1], [0, Math.PI * 0.5]);\n  const rotationZ = rZ.to([0, 1], [0, Math.PI * 0.5]);\n  // const color = rX .to([0, 1], [\"#6246ea\", \"#e45858\"]);\n  // useFrame(() => {\n  //   mesh.current.rotation.x += .01;\n  //   // mesh.current.rotation.y = j;\n  // });\n\n  return (\n    <>\n      <Canvas perspective camera={{ position: [0, 0, 10], fov: 30 }}>\n        {/* <color attach=\"background\" args={\"black\"} /> */}\n        <ambientLight intensity={0.5} />\n        <Suspense fallback={null}>\n          <QRCube\n            // scale={scale}\n            rotationY={rotationY}\n            rotationX={rotationX}\n            rotationZ={rotationZ}\n            color={rotationY}\n          />\n        </Suspense>\n      </Canvas>\n      <Bar>\n        <Button onClick={() => setXenon(Number(xenon + 1))}>\n          X: Rotate Clockwise\n        </Button>\n        <Button onClick={() => setXenon(Number(xenon - 1))}>\n          X: Rotate Coutner-Clockwise\n        </Button>\n        <Button onClick={() => setYoga(Number(yoga + 1))}>\n          Y: Rotate Clockwise\n        </Button>\n        <Button onClick={() => setYoga(Number(yoga - 1))}>\n          Y: Rotate Coutner-Clockwise\n        </Button>\n        <Button onClick={() => setZed(Number(zed + 1))}>\n          Z: Rotate Clockwise\n        </Button>\n        <Button onClick={() => setZed(Number(zed - 1))}>\n          Z: Rotate Coutner-Clockwise\n        </Button>\n      </Bar>\n    </>\n  );\n}\n","import Blop from \"./Blop\";\nimport React, { useState, useEffect } from \"react\";\n\nexport default function App(props) {\n  const [scale, setScale] = useState(50);\n  const [spin, setSpin] = useState(0);\n  const [hertSpin, setHertSpin] = useState(0);\n  const [vertSpin, setVertSpin] = useState(0);\n  const [increment, setIncrement] = useState(0);\n\n  const increase = () => {\n    let i = 10;\n    setScale(scale + i);\n    console.log(scale);\n  };\n\n  const plus = () => {\n    let i = 1;\n    setIncrement(increment + i);\n  };\n\n  const decrease = () => {\n    let i = 10;\n    setScale(scale - i);\n  };\n\n  const stopSpin = () => {\n    setSpin(0.01);\n  };\n  //bad way to rotate the face from the top face.\n  const vertSpinner = () => {\n    let i = Math.PI * 0.5;\n    console.log(i);\n    setVertSpin(vertSpin + i);\n  };\n\n  //bad way to rotate the face side face\n  const hertSpinner = () => {\n    let i = 1;\n    setHertSpin(hertSpin + i);\n  };\n\n  const screenH = \"80vh\";\n  const screenW = window.width;\n\n  return (\n    <>\n      <div\n        className=\"container-flex\"\n        style={{ height: screenH, width: screenW }}\n      >\n        <Blop />\n      </div>\n\n      {/* <div className=\"face1 bg-danger\">FACE 1</div>\n\n      <div className=\"d-flex justify-content-around bg-success fixed-bottom\">\n        <button className=\"btn btn-primary\" onClick={increase}>\n          {\" \"}\n          Increase the Size{\" \"}\n        </button>\n\n        <button className=\"btn btn-primary\" onClick={decrease}>\n          {\" \"}\n          Decrease the Size{\" \"}\n        </button>\n        <button className=\"btn btn-primary\" onClick={stopSpin}>\n          {\" \"}\n          Stop Spin{\" \"}\n        </button>\n        <button className=\"btn btn-primary\" onClick={vertSpinner}>\n          {\" \"}\n          Rotate Y face{\" \"}\n        </button>\n        <button className=\"btn btn-primary\" onClick={hertSpinner}>\n          {\" \"}\n          Rotate X face / On the Y axis{\" \"}\n        </button>\n        <button className=\"btn btn-primary\" onClick={plus}>\n          {\" \"}\n          test incrementer\n        </button>\n      </div> */}\n    </>\n  );\n}\n","import ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport Blop from \"./Blop\";\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <App />,\n\n  rootElement\n);\n"],"sourceRoot":""}